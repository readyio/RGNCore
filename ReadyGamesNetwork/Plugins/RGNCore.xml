<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RGNCore</name>
    </assembly>
    <members>
        <member name="T:RGN.Attributes.GeneratorCustomImplAttribute">
            <summary>
            Attribute to mark a class or a method with a custom implementation for the generator.
            This is typically used within the RGN SDK to specify when a default generation
            process should be overridden with a specific implementation.
            </summary>
        </member>
        <member name="T:RGN.Attributes.GeneratorExcludeAttribute">
            <summary>
            Attribute to indicate that a class or method should be excluded from the generation process.
            When applied, the RGN SDK's generator will ignore the marked element, effectively
            preventing any automated processing or inclusion in the generated output.
            </summary>
        </member>
        <member name="T:RGN.AuthState">
            <summary>
            Represents current user authentication state within the RGN SDK.
            </summary>
        </member>
        <member name="P:RGN.AuthState.LoginState">
            <summary>
            Representing the current login state within the RGN SDK.
            </summary>
        </member>
        <member name="P:RGN.AuthState.AuthProvider">
            <summary>
            Represents the Auth provider that is used to authenticate the user.
            </summary>
        </member>
        <member name="P:RGN.AuthState.LoginResult">
            <summary>
            Represents potential login results within the RGN SDK.
            </summary>
        </member>
        <member name="M:RGN.AuthState.ToString">
            <summary>
            Represents the AuthState as a string
            </summary>
            <returns>AuthState as a string</returns>
        </member>
        <member name="T:RGN.BaseModule`1">
            <summary>
            Represents a base module for other RGN modules to inherit from.
            </summary>
            <typeparam name="TModule">The type of the derived module.</typeparam>
        </member>
        <member name="P:RGN.BaseModule`1.I">
            <summary>
            Gets the singleton instance of the derived module.
            </summary>
        </member>
        <member name="F:RGN.BaseModule`1._rgnCore">
            <summary>
            The RGN core reference to use in the module code
            </summary>
        </member>
        <member name="M:RGN.BaseModule`1.SetRGNCore(RGN.IRGNRolesCore)">
            <summary>
            Sets the Ready Games Network (RGN) core reference.
            </summary>
            <param name="rgnCore">The RGN core to be set.</param>
        </member>
        <member name="M:RGN.BaseModule`1.Init">
            <summary>
            Initializes the module
            </summary>
        </member>
        <member name="M:RGN.BaseModule`1.Dispose(System.Boolean)">
            <summary>
            Sets the static instance of the module to default value
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RGN.BaseModule`1.Dispose">
            <summary>
            Implements the disposing pattern
            </summary>
        </member>
        <member name="T:RGN.EnumAuthProvider">
            <summary>
            Represents the Auth provider that is used to authenticate the user.
            </summary>
        </member>
        <member name="F:RGN.EnumAuthProvider.None">
            <summary>
            User is not logged in, or the auth provider is not yet initialized
            </summary>
        </member>
        <member name="F:RGN.EnumAuthProvider.Firebase">
            <summary>
            Firebase auth provider
            </summary>
        </member>
        <member name="F:RGN.EnumAuthProvider.Facebook">
            <summary>
            Facebook auth provider
            </summary>
        </member>
        <member name="F:RGN.EnumAuthProvider.Google">
            <summary>
            Google auth provider
            </summary>
        </member>
        <member name="F:RGN.EnumAuthProvider.Apple">
            <summary>
            Apple auth provider
            </summary>
        </member>
        <member name="F:RGN.EnumAuthProvider.Email">
            <summary>
            Email auth provider
            </summary>
        </member>
        <member name="F:RGN.EnumAuthProvider.Guest">
            <summary>
            Guest auth provider
            </summary>
        </member>
        <member name="T:RGN.EnumLoginResult">
            <summary>
            An enumeration representing potential login results within the RGN SDK.
            </summary>
        </member>
        <member name="F:RGN.EnumLoginResult.None">
            <summary>
            Default login result, when the SDK is initialized
            </summary>
        </member>
        <member name="F:RGN.EnumLoginResult.Ok">
            <summary>
            Login successful, no errors encountered.
            </summary>
        </member>
        <member name="F:RGN.EnumLoginResult.AccountAlreadyLinked">
            <summary>
            Login unsuccessful due to a previous link with an account.
            </summary>
        </member>
        <member name="F:RGN.EnumLoginResult.AccountExistsWithDifferentCredentials">
            <summary>
            Login unsuccessful because an account exists with different credentials.
            </summary>
        </member>
        <member name="F:RGN.EnumLoginResult.AccountNeedsRecentLogin">
            <summary>
            Login unsuccessful due to the need for a more recent login.
            </summary>
        </member>
        <member name="F:RGN.EnumLoginResult.Unknown">
            <summary>
            Login unsuccessful due to an unknown error.
            </summary>
        </member>
        <member name="F:RGN.EnumLoginResult.Cancelled">
            <summary>
            Login cancelled by the user.
            </summary>
        </member>
        <member name="T:RGN.EnumLoginState">
            <summary>
            An enumeration representing the current login state within the RGN SDK.
            </summary>
        </member>
        <member name="F:RGN.EnumLoginState.Processing">
            <summary>
            User is logging in, awating for backend response
            </summary>
        </member>
        <member name="F:RGN.EnumLoginState.NotLoggedIn">
            <summary>
            User is not logged in.
            </summary>
        </member>
        <member name="F:RGN.EnumLoginState.Success">
            <summary>
            User successfully logged in.
            </summary>
        </member>
        <member name="F:RGN.EnumLoginState.Error">
            <summary>
            An error occurred during the login process.
            </summary>
        </member>
        <member name="T:RGN.EnumRGNEnvironment">
            <summary>
            An enumeration representing the different environments in which the RGN SDK can operate.
            </summary>
        </member>
        <member name="F:RGN.EnumRGNEnvironment.Staging">
            <summary>
            The staging environment, a pre-production environment used for testing.
            </summary>
        </member>
        <member name="F:RGN.EnumRGNEnvironment.Production">
            <summary>
            The production environment, where the live version of the application runs.
            </summary>
        </member>
        <member name="F:RGN.EnumRGNEnvironment.Development">
            <summary>
            The development environment, used by RGN SDK developers for programming and debugging.
            </summary>
        </member>
        <member name="T:RGN.Extensions.CollectionExtensions">
            <summary>
            A static class housing extension methods for collections.
            </summary>
        </member>
        <member name="M:RGN.Extensions.CollectionExtensions.RemoveNullValues``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Removes all entries with null values from a source dictionary.
            </summary>
            <typeparam name="T1">The type of keys in the dictionary.</typeparam>
            <typeparam name="T2">The type of values in the dictionary.</typeparam>
            <param name="source">The source dictionary from which to remove null values.</param>
            <returns>A dictionary of the same type as the source, with all entries having null values removed.</returns>
        </member>
        <member name="T:RGN.Extensions.StringExtensions">
            <summary>
            A static class housing extension methods for strings.
            </summary>
        </member>
        <member name="M:RGN.Extensions.StringExtensions.FirstCharToUpper(System.String)">
            <summary>
            Capitalizes the first character of a string
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:RGN.Extensions.TasksExtensions">
            <summary>
            A static class housing extension methods for Task objects.
            </summary>
        </member>
        <member name="M:RGN.Extensions.TasksExtensions.AsIEnumeratorReturnNull``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Converts a Task object to an IEnumerator, returning null.
            </summary>
            <typeparam name="T">The type of the Task's result.</typeparam>
            <param name="task">The task to be converted.</param>
            <returns>An IEnumerator representing the task.</returns>
        </member>
        <member name="M:RGN.Extensions.TasksExtensions.AsIEnumeratorReturnNull(System.Threading.Tasks.Task)">
            <summary>
            Converts a Task object to an IEnumerator, returning null.
            </summary>
            <param name="task">The task to be converted.</param>
            <returns>An IEnumerator representing the task.</returns>
        </member>
        <member name="M:RGN.Extensions.TasksExtensions.AsIEnumeratorReturnNullDontThrow``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Converts a Task object to an IEnumerator, returning null and not throwing exceptions.
            </summary>
            <typeparam name="T">The type of the Task's result.</typeparam>
            <param name="task">The task to be converted.</param>
            <returns>An IEnumerator representing the task.</returns>
        </member>
        <member name="M:RGN.Extensions.TasksExtensions.AsIEnumeratorReturnNullDontThrow(System.Threading.Tasks.Task)">
            <summary>
            Converts a Task object to an IEnumerator, returning null and not throwing exceptions.
            </summary>
            <param name="task">The task to be converted.</param>
            <returns>An IEnumerator representing the task.</returns>
        </member>
        <member name="T:RGN.Extensions.TimeInfoPeriod">
            Defines available time periods for TimeInfo structure
        </member>
        <member name="F:RGN.Extensions.TimeInfoPeriod.NotStarted">
            The specified time in the structure has not yet started
            CurrentTimestamp less than StartTime (if defined)
        </member>
        <member name="F:RGN.Extensions.TimeInfoPeriod.Promo">
            The specified time in the structure is in the promo period
            CurrentTimestamp less than StartTime, but greater than StartTime minus Promo
        </member>
        <member name="F:RGN.Extensions.TimeInfoPeriod.Active">
            The specified time in the structure is active
        </member>
        <member name="F:RGN.Extensions.TimeInfoPeriod.Inactive">
            The specified time in the structure is in interval duration and temporary inactive
        </member>
        <member name="F:RGN.Extensions.TimeInfoPeriod.Grace">
            The specified time in the structure is in the grace period
            CurrentTimestamp grater than EndTime, but less than EndTime plus Grace
        </member>
        <member name="F:RGN.Extensions.TimeInfoPeriod.Ended">
            The specified time in the structure ended
            CurrentTimestamp grater than EndTime (if defined)
        </member>
        <member name="T:RGN.Extensions.TimeInfoExtensions">
            Utility methods to simplify work with TimeInfo structure
        </member>
        <member name="M:RGN.Extensions.TimeInfoExtensions.IsTimeLimited(RGN.Model.TimeInfo)">
            Is the time structure limited by start or end values
        </member>
        <member name="M:RGN.Extensions.TimeInfoExtensions.IsStartTimeLimited(RGN.Model.TimeInfo)">
            Is the time structure limited by start value
        </member>
        <member name="M:RGN.Extensions.TimeInfoExtensions.IsEndTimeLimited(RGN.Model.TimeInfo)">
            Is the time structure limited by end value
        </member>
        <member name="M:RGN.Extensions.TimeInfoExtensions.HasTimeIntervals(RGN.Model.TimeInfo)">
            Has the time structure intervals
            Note: It means hasIntervals equals to true, or one of interval parameters grater than 0
        </member>
        <member name="M:RGN.Extensions.TimeInfoExtensions.GetCurrentPeriod(RGN.Model.TimeInfo)">
            Returns current period of provided time structure and remaining time of the period
            The method uses timestamp equals to DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
        </member>
        <member name="M:RGN.Extensions.TimeInfoExtensions.GetCurrentPeriod(RGN.Model.TimeInfo,System.Int64)">
            Returns current period of provided time structure and remaining time of the period
            The method uses provided timestamp for calculations
        </member>
        <member name="T:RGN.IApplicationStore">
            <summary>
            Defines the required contract for ApplicationStore, providing necessary application information and configurations.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetRGNMasterAppID">
            <summary>
            Gets the RGN Master Application ID.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetRGNProjectId">
            <summary>
            Gets the RGN Project ID.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetRGNApiKey">
            <summary>
            Gets the RGN Api Key
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetiOSAppId">
            <summary>
            Gets the iOS Application ID.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetAppLinkPrefix">
            <summary>
            Gets the Application Link Prefix.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetRGNEnvironment">
            <summary>
            Gets the RGN Environment.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.IsUsingEmulator">
            <summary>
            Indicates if using an emulator.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetEmulatorServerIp">
            <summary>
            Gets the Emulator Server IP.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetFunctionsPort">
            <summary>
            Gets the Functions Port.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetGoogleSignInWebClientIdAndroid">
            <summary>
            Gets the Google Sign-In Web Client ID for Android.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetGoogleSignInReverseClientIdAndroid">
            <summary>
            Gets the Google Sign-In Reverse Client ID for Android.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetGoogleSignInWebClientIdiOS">
            <summary>
            Gets the Google Sign-In Web Client ID for iOS.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetGoogleSignInReverseClientIdiOS">
            <summary>
            Gets the Google Sign-In Reverse Client ID for iOS.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetFirebaseAssociatedDomain">
            <summary>
            Gets the Firebase Associated Domain.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetRGNMasterApiKey">
            <summary>
            Gets the RGN Master API Key.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetRGNMasterAndroidAppID">
            <summary>
            Gets the RGN Master Android App ID.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetRGNMasterIOSAppID">
            <summary>
            Gets the RGN Master iOS App ID.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetRGNMasterProjectId">
            <summary>
            Gets the RGN Master Project ID.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetRGNStorageURL">
            <summary>
            Gets the RGN Storage URL.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetRGNFriendInviteMessage">
            <summary>
            Gets the RGN Friend Invite Message.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetRGNMasterMessageSenderId">
            <summary>
            Gets the RGN Master Message Sender ID.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetRGNMasterStorageBucket">
            <summary>
            Gets the RGN Master Storage Bucket.
            </summary>
        </member>
        <member name="P:RGN.IApplicationStore.GetRGNMasterDatabaseUrl">
            <summary>
            Gets the RGN Master Database URL.
            </summary>
        </member>
        <member name="T:RGN.IDependencies">
            <summary>
            Defines the dependencies required by the RGN (Ready Games Network) SDK.
            Provides access to various SDK functionality such as analytics, messaging,
            authentication, and more, by exposing interfaces to interact with these services.
            </summary>
        </member>
        <member name="P:RGN.IDependencies.RGNAnalytics">
            <value>Gets the analytics service specific to RGN.</value>
        </member>
        <member name="P:RGN.IDependencies.RGNMessaging">
            <value>Gets the messaging service specific to RGN.</value>
        </member>
        <member name="P:RGN.IDependencies.RGNDynamicLinks">
            <value>Gets the dynamic links service specific to RGN.</value>
        </member>
        <member name="P:RGN.IDependencies.RGNGuestSignIn">
            <value>Gets the guest sign-in functionality.</value>
        </member>
        <member name="P:RGN.IDependencies.ApplicationStore">
            <value>Gets the application store service.</value>
        </member>
        <member name="P:RGN.IDependencies.App">
            <value>Gets the general application interface.</value>
        </member>
        <member name="P:RGN.IDependencies.Analytics">
            <value>Gets the analytics service.</value>
        </member>
        <member name="P:RGN.IDependencies.ReadyMasterAuth">
            <value>Gets the authentication service for Ready Master.</value>
        </member>
        <member name="P:RGN.IDependencies.ReadyMasterFunction">
            <value>Gets the functions service for Ready Master.</value>
        </member>
        <member name="P:RGN.IDependencies.Messaging">
            <value>Gets the messaging service.</value>
        </member>
        <member name="P:RGN.IDependencies.DynamicLinks">
            <value>Gets the dynamiclinks service.</value>
        </member>
        <member name="P:RGN.IDependencies.Json">
            <value>Gets the JSON serialization service.</value>
        </member>
        <member name="P:RGN.IDependencies.EngineApp">
            <value>Gets the engine application service.</value>
        </member>
        <member name="P:RGN.IDependencies.Time">
            <value>Gets the time service.</value>
        </member>
        <member name="P:RGN.IDependencies.Logger">
            <value>Gets the logging service.</value>
        </member>
        <member name="P:RGN.IDependencies.AssetDownloader">
            <value>Gets the asset downloader service.</value>
        </member>
        <member name="P:RGN.IDependencies.AssetCache">
            <value>Gets the asset caching service.</value>
        </member>
        <member name="P:RGN.IDependencies.DeepLink">
            <value>Gets the deeplink service.</value>
        </member>
        <member name="P:RGN.IDependencies.WebForm">
            <value>Gets the webform service.</value>
        </member>
        <member name="M:RGN.IDependencies.Init(RGN.RGNCore)">
            <summary>
            Called after RGN Core build
            </summary>
        </member>
        <member name="T:RGN.ImplDependencies.Assets.AssetCategory">
            <summary>
            Enumerates the categories of assets used within the RGN (Ready Games Network) SDK.
            This helps in identifying the type of asset being handled, such as user profile pictures,
            virtual item images, etc.
            </summary>
        </member>
        <member name="F:RGN.ImplDependencies.Assets.AssetCategory.None">
            <summary>
            Represents no specified category. This is the default value.
            </summary>
        </member>
        <member name="F:RGN.ImplDependencies.Assets.AssetCategory.UserProfilePicture">
            <summary>
            Represents an asset that is a user's profile picture.
            </summary>
        </member>
        <member name="F:RGN.ImplDependencies.Assets.AssetCategory.VirtualItemImage">
            <summary>
            Represents an asset that is an image of a virtual item.
            </summary>
        </member>
        <member name="T:RGN.ImplDependencies.Assets.IAssetCache">
            <summary>
            Provides an interface for caching assets in the RGN (Ready Games Network) SDK.
            This allows for storing and retrieving assets such as images and other binary data
            efficiently by categorizing them and using a string key.
            </summary>
        </member>
        <member name="M:RGN.ImplDependencies.Assets.IAssetCache.HasInCache(RGN.ImplDependencies.Assets.AssetCategory,System.String)">
            <summary>
            Determines whether the specified asset is available in the cache.
            </summary>
            <param name="category">The category of the asset.</param>
            <param name="key">The unique key representing the asset.</param>
            <returns>true if the asset is in the cache; otherwise, false.</returns>
        </member>
        <member name="M:RGN.ImplDependencies.Assets.IAssetCache.ReadFromCache(RGN.ImplDependencies.Assets.AssetCategory,System.String)">
            <summary>
            Reads the specified asset from the cache.
            </summary>
            <param name="category">The category of the asset.</param>
            <param name="key">The unique key representing the asset.</param>
            <returns>The asset data as a byte array.</returns>
        </member>
        <member name="M:RGN.ImplDependencies.Assets.IAssetCache.TryReadFromCache(RGN.ImplDependencies.Assets.AssetCategory,System.String,System.Byte[]@)">
            <summary>
            Tries to read the specified asset from the cache and outputs it if found.
            </summary>
            <param name="category">The category of the asset.</param>
            <param name="key">The unique key representing the asset.</param>
            <param name="data">When this method returns, contains the asset data as a byte array,
            if the asset is found; otherwise, null. This parameter is passed uninitialized.</param>
            <returns>true if the asset is found in the cache; otherwise, false.</returns>
        </member>
        <member name="M:RGN.ImplDependencies.Assets.IAssetCache.WriteToCache(RGN.ImplDependencies.Assets.AssetCategory,System.String,System.Byte[])">
            <summary>
            Writes the specified asset to the cache.
            </summary>
            <param name="category">The category of the asset to be written to the cache.</param>
            <param name="key">The unique key representing the asset.</param>
            <param name="data">The asset data as a byte array to be written to the cache.</param>
        </member>
        <member name="M:RGN.ImplDependencies.Assets.IAssetCache.Clear">
            <summary>
            Clears all assets from the cache.
            </summary>
        </member>
        <member name="T:RGN.ImplDependencies.Assets.IAssetDownloader">
            <summary>
            Provides an interface for downloading assets in the RGN (Ready Games Network) SDK.
            This allows for asynchronous download of assets such as images and other binary data
            from specified URLs with support for optional caching behavior.
            </summary>
        </member>
        <member name="M:RGN.ImplDependencies.Assets.IAssetDownloader.DownloadAsync(RGN.ImplDependencies.Assets.AssetCategory,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously downloads an asset from the given URL, with an option to bypass the cache.
            </summary>
            <param name="category">The category of the asset to download.</param>
            <param name="url">The URL from where the asset is to be downloaded.</param>
            <param name="bypassCache">If set to true, the cache will be bypassed; otherwise, the cache will be checked first.</param>
            <param name="cancellationToken">A token for canceling the operation if necessary.</param>
            <returns>A task that represents the asynchronous download operation, containing the downloaded asset as a byte array.</returns>
        </member>
        <member name="M:RGN.ImplDependencies.Assets.IAssetDownloader.DownloadNoCacheAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously downloads an asset from the given URL without using the cache.
            </summary>
            <param name="url">The URL from where the asset is to be downloaded.</param>
            <param name="cancellationToken">A token for canceling the operation if necessary.</param>
            <returns>A task that represents the asynchronous download operation, containing the downloaded asset as a byte array.</returns>
        </member>
        <member name="T:RGN.IRGNCore">
            <summary>
            Ready Games Network core class. Is resposible for user auth and modules initialization
            </summary>
        </member>
        <member name="E:RGN.IRGNCore.AuthenticationChanged">
            <summary>
            Is called every time the user auth state is changed
            For example user logs out, logs in as a guest, logs is with email
            </summary>
        </member>
        <member name="E:RGN.IRGNCore.UpdateEvent">
            <summary>
            Unity Update event. You can subscribe on this event to receive updates every frame.
            </summary>
        </member>
        <member name="P:RGN.IRGNCore.CurrentAuthState">
            <summary>
            Returns the current Authentication state for the User
            </summary>
        </member>
        <member name="P:RGN.IRGNCore.Dependencies">
            <summary>
            The RGN SDK dependencies contract
            </summary>
        </member>
        <member name="P:RGN.IRGNCore.AuthorizedProviders">
            <summary>
            Mask of all providers, linked to user acc
            </summary>
        </member>
        <member name="P:RGN.IRGNCore.AppIDForRequests">
            <summary>
            RGNAppId, set on RGNCoreBuilder.Build() and can override by OverrideApplicationIdentifier()
            </summary>
        </member>
        <member name="P:RGN.IRGNCore.MasterAppUser">
            <summary>
            User from ReadyMaster firebase backend
            </summary>
        </member>
        <member name="P:RGN.IRGNCore.IsLoggedIn">
            <summary>
            Indicates, that user is currently logged in with one of linked providers
            </summary>
        </member>
        <member name="T:RGN.IRGNModule">
            <summary>
            Defines the required contract for RGN Modules, providing necessary methods for initialization and disposal.
            </summary>
        </member>
        <member name="M:RGN.IRGNModule.SetRGNCore(RGN.IRGNRolesCore)">
            <summary>
            Sets the RGN Core for the module.
            </summary>
            <param name="rgnCore">The RGN Core to set.</param>
        </member>
        <member name="M:RGN.IRGNModule.Init">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="T:RGN.Model.ImageSize">
            <summary>
            Defines the available image sizes that can be requested or manipulated within the system.
            </summary>
        </member>
        <member name="F:RGN.Model.ImageSize.Source">
            <summary>
            The original size of the image as it was sourced.
            </summary>
        </member>
        <member name="F:RGN.Model.ImageSize.Small">
            <summary>
            A small version of the image, typically used for thumbnails or icons.
            </summary>
        </member>
        <member name="F:RGN.Model.ImageSize.Medium">
            <summary>
            A medium version of the image, suitable for previews or list views.
            </summary>
        </member>
        <member name="F:RGN.Model.ImageSize.Large">
            <summary>
            A large version of the image, which can be used for detailed viewing.
            </summary>
        </member>
        <member name="T:RGN.Model.ImageUrl">
            <summary>
            Represents a mapping of image URLs to their respective size identifiers.
            Inherits from a dictionary with string keys and string values.
            </summary>
        </member>
        <member name="P:RGN.Model.ImageUrl.source">
            <summary>
            Gets the source size image URL if available; otherwise, gets a placeholder URL.
            </summary>
        </member>
        <member name="P:RGN.Model.ImageUrl.large">
            <summary>
            Gets the large size image URL if available; otherwise, gets a placeholder URL.
            </summary>
        </member>
        <member name="P:RGN.Model.ImageUrl.medium">
            <summary>
            Gets the medium size image URL if available; otherwise, gets a placeholder URL.
            </summary>
        </member>
        <member name="P:RGN.Model.ImageUrl.small">
            <summary>
            Gets the small size image URL if available; otherwise, gets a placeholder URL.
            </summary>
        </member>
        <member name="M:RGN.Model.ImageUrl.GetPlaceholderUrl(RGN.Model.ImageSize)">
            <summary>
            Provides a mechanism to retrieve a placeholder URL for a given image size.
            This method is intended to be overridden by derived classes to supply custom placeholder URLs.
            </summary>
            <param name="size">The size of the image for which a placeholder URL is required.</param>
            <returns>A string representing the placeholder URL.</returns>
        </member>
        <member name="M:RGN.Model.ImageUrl.GetUrl(RGN.Model.ImageSize)">
            <summary>
            Retrieves the URL for the specified image size.
            </summary>
            <param name="size">The size for which to retrieve the image URL.</param>
            <returns>The image URL associated with the specified size.</returns>
        </member>
        <member name="M:RGN.Model.ImageUrl.ToString">
            <summary>
            Returns a string that represents all the key-value pairs contained in the ImageUrl dictionary.
            </summary>
            <returns>A string with each key-value pair on a new line.</returns>
        </member>
        <member name="T:RGN.Model.OpenSea.OpenSeaAttribute">
            <summary>
            Represents an attribute for an item on OpenSea, typically a trait associated with a collectible or NFT.
            </summary>
        </member>
        <member name="F:RGN.Model.OpenSea.OpenSeaAttribute.trait_type">
            <summary>
            The name of the trait that this attribute represents.
            </summary>
        </member>
        <member name="F:RGN.Model.OpenSea.OpenSeaAttribute.value">
            <summary>
            The value of the trait. This can be a string, number, or any other type of object.
            </summary>
        </member>
        <member name="F:RGN.Model.OpenSea.OpenSeaAttribute.display_type">
            <summary>
            A string specifying how the trait should be displayed. 
            Could be used to indicate whether the trait is a date, a percentage, etc.
            </summary>
        </member>
        <member name="T:RGN.Model.OpenSea.OpenSeaMetadata">
            <summary>
            Please review the official OpenSea documentation:
            https://docs.opensea.io/docs/metadata-standards
            </summary>
        </member>
        <member name="F:RGN.Model.OpenSea.OpenSeaMetadata.name">
            <summary>
            Name of the item.
            </summary>
        </member>
        <member name="F:RGN.Model.OpenSea.OpenSeaMetadata.description">
            <summary>
            A human readable description of the item. Markdown is supported.
            </summary>
        </member>
        <member name="F:RGN.Model.OpenSea.OpenSeaMetadata.external_url">
            <summary>
            This is the URL that will appear below the asset's image
            on OpenSea and will allow users to leave OpenSea and view
            the item on your site.
            </summary>
        </member>
        <member name="F:RGN.Model.OpenSea.OpenSeaMetadata.background_color">
            <summary>
            Background color of the item on OpenSea.
            Must be a six-character hexadecimal without a pre-pended #.
            </summary>
        </member>
        <member name="F:RGN.Model.OpenSea.OpenSeaMetadata.animation_url">
            <summary>
            URL to a multi-media attachment for the item. The file extensions
            GLTF, GLB, WEBM, MP4, M4V, OGV, and OGG are supported, along with
            the audio-only extensions MP3, WAV, and OGA.
            Animation_url also supports HTML pages, allowing you to build rich
            experiences and interactive NFTs using JavaScript canvas, WebGL, and more.
            Scripts and relative paths within the HTML page are now supported.
            However, access to browser extensions is not supported.
            </summary>
        </member>
        <member name="F:RGN.Model.OpenSea.OpenSeaMetadata.youtube_url">
            <summary>
            A URL to a YouTube video.
            </summary>
        </member>
        <member name="F:RGN.Model.OpenSea.OpenSeaMetadata.image">
            <summary>
            This is the URL to the image of the item. Can be just about any type
            of image (including SVGs, which will be cached into PNGs by OpenSea),
            and can be IPFS URLs or paths. We recommend using a 350 x 350 image.
            </summary>
        </member>
        <member name="F:RGN.Model.OpenSea.OpenSeaMetadata.image_data">
            <summary>
            Raw SVG image data, if you want to generate images on the fly (not recommended).
            Only use this if you're not including the image parameter.
            </summary>
        </member>
        <member name="F:RGN.Model.OpenSea.OpenSeaMetadata.attributes">
            <summary>
            These are the attributes for the item, which will show up on the OpenSea page for the item.
            </summary>
        </member>
        <member name="T:RGN.Model.ParticipationFee">
            <summary>
            A class that represents a participation fee on Ready Games Network.
            </summary>
        </member>
        <member name="F:RGN.Model.ParticipationFee.type">
            <summary>
            Specifies the type of the fee.
            Specifies the type of the participation fee.
            Available types are:
            - `currency` - the user needs to pay a specific amount of currency to join a leaderboard.
            - `gamepass_by_id` - the user needs to have a gamepass with a specific id to join a leaderboard.
            - `gamepass_by_request_name` - the user needs to have a gamepass with a specific request name to join a
            leaderboard.
            </summary>
        </member>
        <member name="F:RGN.Model.ParticipationFee.id">
            <summary>
            The id of the entity to check in user data. For example, if the type is `gamepass_by_id`, the id is the id of the
            gamepass.If the type is `gamepass_by_request_name`, the id is the request name of the gamepass.
            </summary>
        </member>
        <member name="F:RGN.Model.ParticipationFee.quantity">
            <summary>
            The quantity of the entity to check in user data. For example, if the type is `currency`, the quantity is the
            amount of currency.If the type is `gamepass_by_id`, the quantity is the quantity of the game passes the user
            needs to have.
            </summary>
        </member>
        <member name="T:RGN.Model.Request.BaseMigrationRequestData">
            <summary>
            This class supports multiple versions of an API by appending a "version" parameter to the request data.
            </summary>
        </member>
        <member name="P:RGN.Model.Request.BaseMigrationRequestData.Default">
            <summary>
            Singleton instance of BaseMigrationRequestData to minimize object allocations.
            </summary>
        </member>
        <member name="F:RGN.Model.Request.BaseMigrationRequestData.version">
            <summary>
            Represents the current version of the API implementation on the server.
            </summary>
        </member>
        <member name="M:RGN.Model.Request.BaseMigrationRequestData.#ctor">
            <summary>
            A protected constructor to restrict the direct instantiation of this class and
            ensure it's only used within an inheritance hierarchy.
            </summary>
        </member>
        <member name="T:RGN.Model.Request.BaseRequestData">
            <summary>
            Base class for request data that is sent to a server.
            It includes common data that is required for all requests.
            </summary>
        </member>
        <member name="P:RGN.Model.Request.BaseRequestData.Default">
            <summary>
            Gets the default instance of <see cref="T:RGN.Model.Request.BaseRequestData"/>.
            </summary>
        </member>
        <member name="F:RGN.Model.Request.BaseRequestData.appPackageName">
            <summary>
            The package name of the app making the request. This is typically used for identification purposes.
            </summary>
        </member>
        <member name="M:RGN.Model.Request.BaseRequestData.#ctor">
            <summary>
            Protected constructor for <see cref="T:RGN.Model.Request.BaseRequestData"/>.
            </summary>
        </member>
        <member name="T:RGN.Model.Requirement">
            <summary>
            A class that represents a leaderboard join or store offer purchase requirement on Ready Games Network.
            </summary>
        </member>
        <member name="F:RGN.Model.Requirement.type">
            <summary>
            Specifies the type of the requirement.
            Available types are:
            - `gamepass_by_id` - the user needs to have a gamepass with a specific id to join a leaderboard or purchase a
            store offer.
            - `gamepass_by_request_name` - the user needs to have a gamepass with a specific request name to join a
            leaderboard or purchase a store offer.
            - `item_by_id` - the user needs to have a virtual item with a specific id to join a leaderboard or purchase a
            store offer.
            - `item_by_tag` - the user needs to have a virtual item with a specific tag to join a leaderboard or
            purchase a store offer.
            - `achievement_by_id` - the user needs to complete an achievement to join a leaderboard or purchase a store
            offer.
            - `achievement_by_request_name` - the user needs to complete an achievement with a specific request name to
            join a leaderboard or purchase a store offer.
            </summary>
        </member>
        <member name="F:RGN.Model.Requirement.id">
            <summary>
            The id of the entity to check in user data. For example, if the type is `gamepass_by_id`, the id is the id of the
            gamepass.If the type is `item_by_tag`, the id is the tag of the virtual item.
            </summary>
        </member>
        <member name="T:RGN.Model.RequirementData">
            <summary>
            A class that represents a leaderboard join or store offer purchase requirements on Ready Games Network.
            </summary>
        </member>
        <member name="F:RGN.Model.RequirementData.operation">
            <summary>
            The operation to check the <see cref="F:RGN.Model.RequirementData.requirements"/> with.
            Available operations are:
            `and` - the user must meet all of the requirements.
            `or` - the user must meet at least one of the requirements.
            </summary>
        </member>
        <member name="F:RGN.Model.RequirementData.requirements">
            <summary>
            The list of requirements.
            </summary>
        </member>
        <member name="T:RGN.Model.Response.BaseResponseData">
            <summary>
            Represents the base class for response data received from a server.
            It contains common properties that are expected in all responses.
            </summary>
        </member>
        <member name="F:RGN.Model.Response.BaseResponseData.status">
            <summary>
            The status code of the response, typically indicating success or failure of the request.
            </summary>
        </member>
        <member name="F:RGN.Model.Response.BaseResponseData.message">
            <summary>
            A message providing additional information about the response, such as an error message or a status update.
            </summary>
        </member>
        <member name="T:RGN.Model.TimeInfo">
            <summary>
            Represents the time information.
            This information can be used for time-limited entities.
            </summary>
        </member>
        <member name="F:RGN.Model.TimeInfo.hasStart">
            <summary>
            Indicates whether a start time is specified.
            </summary>
        </member>
        <member name="F:RGN.Model.TimeInfo.start">
            <summary>
            The start time. This field is relevant only if <see cref="F:RGN.Model.TimeInfo.hasStart"/> is true.
            </summary>
        </member>
        <member name="F:RGN.Model.TimeInfo.hasEnd">
            <summary>
            Indicates whether an end time is specified.
            </summary>
        </member>
        <member name="F:RGN.Model.TimeInfo.end">
            <summary>
            The end time. This field is relevant only if <see cref="F:RGN.Model.TimeInfo.hasEnd"/> is true.
            </summary>
        </member>
        <member name="F:RGN.Model.TimeInfo.hasInterval">
            <summary>
            Indicates whether an interval is specified.
            </summary>
        </member>
        <member name="F:RGN.Model.TimeInfo.intervalDuration">
            <summary>
            The interval duration. This field is relevant only if <see cref="F:RGN.Model.TimeInfo.hasInterval"/> is true.
            </summary>
        </member>
        <member name="F:RGN.Model.TimeInfo.intervalDelay">
            <summary>
            The interval delay. This field is relevant only if <see cref="F:RGN.Model.TimeInfo.hasInterval"/> is true.
            </summary>
        </member>
        <member name="F:RGN.Model.TimeInfo.hasPromo">
            <summary>
            Indicates whether a promo is specified.
            </summary>
        </member>
        <member name="F:RGN.Model.TimeInfo.promo">
            <summary>
            The promo duration in milliseconds before the start time.
            This field is relevant only if <see cref="F:RGN.Model.TimeInfo.hasPromo"/> and <see cref="F:RGN.Model.TimeInfo.hasStart"/> are true.
            </summary>
        </member>
        <member name="F:RGN.Model.TimeInfo.hasGrace">
            <summary>
            Indicates whether a grace is specified.
            </summary>
        </member>
        <member name="F:RGN.Model.TimeInfo.grace">
            <summary>
            The grace duration in milliseconds after the end time.
            This field is relevant only if <see cref="F:RGN.Model.TimeInfo.hasGrace"/> and <see cref="F:RGN.Model.TimeInfo.hasEnd"/> are true.
            </summary>
        </member>
        <member name="M:RGN.Model.TimeInfo.#ctor">
            <summary>
            Default parameterless ctor
            </summary>
        </member>
        <member name="M:RGN.Model.TimeInfo.#ctor(System.Boolean,System.Int64,System.Boolean,System.Int64,System.Boolean,System.Int64,System.Int64,System.Boolean,System.Int64,System.Boolean,System.Int64)">
            <summary>
            Constructs TimeInfo
            </summary>
            <param name="hasStart"></param>
            <param name="start"></param>
            <param name="hasEnd"></param>
            <param name="end"></param>
            <param name="hasInterval"></param>
            <param name="intervalDuration"></param>
            <param name="intervalDelay"></param>
            <param name="hasPromo"></param>
            <param name="promo"></param>
            <param name="hasGrace"></param>
            <param name="grace"></param>
        </member>
        <member name="M:RGN.Model.TimeInfo.ToString">
            <summary>
            Converts the object's properties to strings representation
            </summary>
            <returns>A string that represents the object's properties</returns>
        </member>
        <member name="M:RGN.Model.TimeInfo.Equals(RGN.Model.TimeInfo)">
            <summary>
            Implements standart Equals operation
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:RGN.Model.TimeInfo.Equals(System.Object)">
            <summary>
            Implements standart Equals operation
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RGN.Model.TimeInfo.GetHashCode">
            <summary>
            Returns hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:RGN.Model.TimeInfo.CreatePermanent">
            <summary>
            Creates a <see cref="T:RGN.Model.TimeInfo"/> object that represents a permanent time, with no specific start, end or interval.
            </summary>
            <returns>A new <see cref="T:RGN.Model.TimeInfo"/> instance.</returns>
        </member>
        <member name="M:RGN.Model.TimeInfo.CreateWithStartTime(System.Int64)">
            <summary>
            Creates a <see cref="T:RGN.Model.TimeInfo"/> object with a specified start time.
            </summary>
            <param name="start">The start time.</param>
            <returns>A new <see cref="T:RGN.Model.TimeInfo"/> instance.</returns>
        </member>
        <member name="M:RGN.Model.TimeInfo.CreateWithEndTime(System.Int64)">
            <summary>
            Creates a <see cref="T:RGN.Model.TimeInfo"/> object with a specified end time.
            </summary>
            <param name="end">The end time.</param>
            <returns>A new <see cref="T:RGN.Model.TimeInfo"/> instance.</returns>
        </member>
        <member name="M:RGN.Model.TimeInfo.CreateWithStartAndEndTime(System.Int64,System.Int64)">
            <summary>
            Creates a <see cref="T:RGN.Model.TimeInfo"/> object with specified start and end times.
            </summary>
            <param name="start">The start time.</param>
            <param name="end">The end time.</param>
            <returns>A new <see cref="T:RGN.Model.TimeInfo"/> instance.</returns>
        </member>
        <member name="M:RGN.Model.TimeInfo.CreateWithStartTimeAndInterval(System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a <see cref="T:RGN.Model.TimeInfo"/> object with a specified start time and interval.
            </summary>
            <param name="start">The start time.</param>
            <param name="intervalDuration">The interval duration.</param>
            <param name="intervalDelay">The interval delay.</param>
            <returns>A new <see cref="T:RGN.Model.TimeInfo"/> instance.</returns>
        </member>
        <member name="M:RGN.Model.TimeInfo.CreateWithEndTimeAndInterval(System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a <see cref="T:RGN.Model.TimeInfo"/> object with a specified end time and interval.
            </summary>
            <param name="end">The end time.</param>
            <param name="intervalDuration">The interval duration.</param>
            <param name="intervalDelay">The interval delay.</param>
            <returns>A new <see cref="T:RGN.Model.TimeInfo"/> instance.</returns>
        </member>
        <member name="M:RGN.Model.TimeInfo.CreateWithStartEndTimeAndInterval(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a <see cref="T:RGN.Model.TimeInfo"/> object with specified start time, end time, and interval.
            </summary>
            <param name="start">The start time.</param>
            <param name="end">The end time.</param>
            <param name="intervalDuration">The interval duration.</param>
            <param name="intervalDelay">The interval delay.</param>
        </member>
        <member name="T:RGN.ModuleDependencies.IRGNAnalytics">
            <summary>
            This interface is used to inject the module dependency and make it optional
            If the developers do not use the RGN Analytics package, the value in Dependencies will be null
            </summary>
        </member>
        <member name="M:RGN.ModuleDependencies.IRGNAnalytics.LogEventAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously logs an analytic event with provided event name into RGN analytics backend
            Later you can request 
            </summary>
            <param name="eventName">The analytics event name</param>
            <param name="eventParameters">Optional event parameters to store with the event</param>
            <param name="cancellationToken">Optional parameter to enable cancellation of the task.
            Default value is an unset CancellationToken.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when eventName is null or empty.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellationToken.</exception>
        </member>
        <member name="T:RGN.ModuleDependencies.IRGNDynamicLinks">
            <summary>
            This interface is used to inject the module dependency and make it optional
            If the developers do not use the RGN Dynamic Links package, the value in Dependencies will be null
            </summary>
        </member>
        <member name="T:RGN.ModuleDependencies.IRGNGuestSignIn">
            <summary>
            This interface is used to inject the module dependency and make it optional
            If the developers do not use the RGN Guest Sign In package, the value in Dependencies will be null
            </summary>
        </member>
        <member name="M:RGN.ModuleDependencies.IRGNGuestSignIn.TryToSignInAsync">
            <summary>
            Tries to sign in with anonymous account to Ready Games Network (RGN)
            </summary>
        </member>
        <member name="T:RGN.ModuleDependencies.IRGNMessaging">
            <summary>
            This interface is used to inject the module dependency and make it optional
            If the developers do not use the RGN Messaging package, the value in Dependencies will be null
            </summary>
        </member>
        <member name="E:RGN.RGNCore.InitializedEvent">
            <summary>
            This event is invoked when the SDK is fully initialized.
            </summary>
        </member>
        <member name="T:RGN.RGNCoreBuilder">
            <summary>
            Responsible for creating RGNCore instance and initializing it
            </summary>
        </member>
        <member name="P:RGN.RGNCoreBuilder.Initialized">
            <summary>
            Gets a value indicating whether the RGNCoreBuilder has been initialized.
            </summary>
        </member>
        <member name="P:RGN.RGNCoreBuilder.I">
            <summary>
            Gets the RGNCore instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when core has not been built yet.</exception>
        </member>
        <member name="M:RGN.RGNCoreBuilder.AddModule(RGN.IRGNModule)">
            <summary>
            Adds a new IRGNModule to the internal modules list.
            </summary>
            <param name="module">The module to add.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when RGNCore instance is not null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when module already exists in the list.</exception>
        </member>
        <member name="M:RGN.RGNCoreBuilder.CreateAndBuildAsync(RGN.IDependencies,RGN.RGNCore.AuthenticationChangedDelegate)">
            <summary>
            Creates and builds an asynchronous instance of the RGNCore.
            </summary>
            <param name="dependencies">Instance of the RGN SDK dependencies implementation.</param>
            <param name="authenticationChanged">Callback to receive user authentication events.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when RGNCore instance is not null.</exception>
            <returns>Asynchronous operation that returns an IRGNCore instance.</returns>
        </member>
        <member name="M:RGN.RGNCoreBuilder.CreateInstance(RGN.IDependencies)">
            <summary>
            Creates an instance of the IRGNCore.
            </summary>
            <param name="dependencies">ImplDependencies needed to create the instance.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when RGNCore instance is not null.</exception>
            <returns>Instance of IRGNCore created.</returns>
        </member>
        <member name="M:RGN.RGNCoreBuilder.BuildAsync">
            <summary>
            Asynchronously builds the RGNCore.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when RGNCore instance is null.</exception>
            <returns>Task representing the operation.</returns>
        </member>
        <member name="M:RGN.RGNCoreBuilder.Dispose">
            <summary>
            Disposes of the resources used by the RGNCoreBuilder.
            </summary>
        </member>
        <member name="T:RGN.Utility.DateTimeUtility">
            <summary>
            Provides utility functions for handling DateTime values in Unity. This class contains methods that convert Unix timestamp to DateTime and
            DateTime to ISO format strings. It's designed to work with the Ready Games Network (RGN) Unity SDK.
            </summary>
        </member>
        <member name="M:RGN.Utility.DateTimeUtility.UnixTimeStampToDateTime(System.Double)">
            <summary>
            Converts a Unix timestamp (milliseconds) to a DateTime object.
            </summary>
            <param name="unixTimeStamp">The Unix timestamp in milliseconds to convert, represented as a double.</param>
            <returns>A DateTime object that represents the specified Unix timestamp converted to local time.</returns>
        </member>
        <member name="M:RGN.Utility.DateTimeUtility.DateTimeToUnixTimeStamp(System.DateTime)">
            <summary>
            Converts a DateTime object to Unix Timestamp in milliseconds
            </summary>
            <param name="dateTime">The date time to convert</param>
            <returns>Milliseconds since Unix epoch (midnight of 1970 year)</returns>
        </member>
        <member name="M:RGN.Utility.DateTimeUtility.DateTimeToISOString(System.DateTime)">
            <summary>
            Converts a DateTime object to an ISO format string, including milliseconds.
            </summary>
            <param name="dateTime">The DateTime object to convert.</param>
            <returns>A string representation of the specified DateTime in ISO format with millisecond precision.</returns>
        </member>
        <member name="M:RGN.Utility.DateTimeUtility.DateTimeToISOLikeStringNoMilliseconds(System.DateTime)">
            <summary>
            Converts a DateTime object to an ISO-like format string, excluding milliseconds.
            </summary>
            <param name="dateTime">The DateTime object to convert.</param>
            <returns>A string representation of the specified DateTime in ISO-like format without millisecond precision.</returns>
        </member>
        <member name="M:RGN.Utility.DateTimeUtility.UnixTimeStampToISO(System.Double)">
            <summary>
            Converts a Unix timestamp to an ISO format string.
            </summary>
            <param name="unixTimeStamp">The Unix timestamp to convert, represented as a double.</param>
            <returns>A string representation of the specified Unix timestamp in ISO format with millisecond precision.</returns>
        </member>
        <member name="M:RGN.Utility.DateTimeUtility.UnixTimeStampToISOLikeStringNoMilliseconds(System.Double)">
            <summary>
            Converts a Unix timestamp to an ISO-like format string, excluding milliseconds.
            </summary>
            <param name="unixTimeStamp">The Unix timestamp to convert, represented as a double.</param>
            <returns>A string representation of the specified Unix timestamp in ISO-like format without millisecond precision.</returns>
        </member>
        <member name="M:RGN.Utility.DateTimeUtility.UnixTimeStampToDateTimeOffset(System.Double)">
            <summary>
            Converts a Unix timestamp to a DateTimeOffset object.
            </summary>
            <param name="unixTimeStamp">The Unix timestamp to convert, represented as a double.</param>
            <returns>A DateTimeOffset object that represents the specified Unix timestamp.</returns>
        </member>
        <member name="M:RGN.Utility.DateTimeUtility.DateTimeOffsetToUnixTimeStamp(System.DateTimeOffset)">
            <summary>
            Converts a DateTimeOffset object to a Unix timestamp.
            </summary>
            <param name="dateTimeOffset">The DateTimeOffset object to convert.</param>
            <returns>A Unix timestamp representation of the specified DateTimeOffset.</returns>
        </member>
        <member name="M:RGN.Utility.DateTimeUtility.DateTimeOffsetToISOString(System.DateTimeOffset)">
            <summary>
            Converts a DateTimeOffset object to an ISO format string.
            </summary>
            <param name="dateTimeOffset">The DateTimeOffset object to convert.</param>
            <returns>A string representation of the specified DateTimeOffset in ISO format.</returns>
        </member>
        <member name="M:RGN.Utility.DateTimeUtility.ISOStringToDateTimeOffset(System.String)">
            <summary>
            Converts an ISO format string to a DateTimeOffset object.
            </summary>
            <param name="isoString">The ISO string to convert.</param>
            <returns>A DateTimeOffset object that represents the specified ISO string.</returns>
        </member>
        <member name="M:RGN.Utility.DateTimeUtility.GetUnixEpochDateTimeUtc">
            <summary>
            Gets DateTime of Unix epoch (midnight of 1970 year).
            </summary>
            <returns>A DateTime object that represents Unix epoch (midnight of 1970 year).</returns>
        </member>
        <member name="T:RGN.Utility.ExceptionHelper">
            <summary>
            Provides utility methods to assist with exception handling,
            specifically tailored for logging exceptions using the provided RGN ILogger interface.
            </summary>
        </member>
        <member name="M:RGN.Utility.ExceptionHelper.PrintToLog(RGN.ImplDependencies.Engine.ILogger,System.Exception)">
            <summary>
            Logs the specified exception using the given logger.
            Validates the logger and exception arguments to ensure they are not null before logging.
            </summary>
            <param name="logger">The logger to which the exception information will be written.</param>
            <param name="exception">The exception to log.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if either <paramref name="logger"/> or <paramref name="exception"/> is null.</exception>
        </member>
        <member name="T:RGN.Utility.MathUtils">
            <summary>
            Provides utility methods for mathematical calculations and operations
            that are commonly used throughout the RGN (Ready Games Network) SDK.
            </summary>
        </member>
        <member name="M:RGN.Utility.MathUtils.GetHashInt(System.String)">
            <summary>
            Computes a hash code for the specified string.
            </summary>
            <param name="value">The string to compute the hash code for.</param>
            <returns>An integer hash code for the specified string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null or empty.</exception>
        </member>
        <member name="T:RGN.Utility.NonceGenerator">
            <summary>
            Provides methods for generating random nonces and their SHA256 hashed versions.
            Nonces are used to ensure a message, transaction, or request is unique.
            </summary>
        </member>
        <member name="M:RGN.Utility.NonceGenerator.GenerateRandomString(System.Int32)">
            <summary>
            Generates a random string of a specified length using a cryptographically secure algorithm.
            The characters used in the string are alphanumeric including some special characters (-._).
            </summary>
            <param name="length">The desired length of the random string.</param>
            <returns>A random string of the specified length.</returns>
            <exception cref="T:System.Exception">Thrown when a non-positive length is specified.</exception>
        </member>
        <member name="M:RGN.Utility.NonceGenerator.GenerateSHA256NonceFromRawNonce(System.String)">
            <summary>
            Generates a SHA256 hash of a raw nonce string. 
            </summary>
            <param name="rawNonce">The raw string to hash.</param>
            <returns>A SHA256 hash of the raw nonce.</returns>
        </member>
        <member name="T:RGN.Utility.Obfuscator">
            <summary>
            This class will generate obfuscated data and generate a key to deofscate the data later.
            </summary>
        </member>
        <member name="T:RGN.Utility.Obfuscator.InvalidOrderArray">
            <summary>
            An Exception thrown when the order array provided is invalid or shorter than the number of data slices made.
            </summary>
        </member>
        <member name="M:RGN.Utility.Obfuscator.Obfuscate(System.Byte[],System.Int32[],System.Int32@)">
            <summary>
            Generates the obfucscation data.
            </summary>
            <param name="data"> Public data to be obfuscated. </param>
            <param name="order"> The array, passed by reference, of order of the data slices used to obfuscate the data with. </param>
            <param name="rkey"> Outputs the encryption key to deobfuscate the data at runtime </param>
            <returns>The obfucated public key</returns>
        </member>
        <member name="M:RGN.Utility.Obfuscator.DeObfuscate(System.Byte[],System.Int32[],System.Int32)">
            <summary>
            Deofuscates the obfuscated data
            </summary>
            <param name="data"> Public data to be obfuscated. </param>
            <param name="order"> The array, passed by reference, of order of the data slices used to obfuscate the data with. </param>
            <param name="key"> Outputs the encryption key to deobfuscate the data at runtime </param>
            <returns>The obfucated public key</returns>
        </member>
        <member name="T:RGN.Utility.StringsUtility">
            <summary>
            Provides utility methods for operations involving strings, such as
            building a single string from a list of strings.
            </summary>
        </member>
        <member name="M:RGN.Utility.StringsUtility.BuildStringFromStringsList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Concatenates the elements of a string list, using a specified separator between each element.
            </summary>
            <param name="strings">The list of strings to concatenate.</param>
            <param name="name">A descriptive name for the elements of the list used in the absence message.</param>
            <returns>A string that consists of the elements in <paramref name="strings"/> delimited by commas,
            or a message indicating no elements are set if <paramref name="strings"/> is empty or null.</returns>
        </member>
        <member name="T:RGN.Utility.ThrowIf">
            <summary>
            Contains static methods for throwing exceptions when common checks fail, such as null or empty checks on arguments.
            </summary>
        </member>
        <member name="T:RGN.Utility.ThrowIf.Argument">
            <summary>
            Nested class containing methods for argument validation.
            </summary>
        </member>
        <member name="M:RGN.Utility.ThrowIf.Argument.IsNull(System.Object,System.String)">
            <summary>
            Throws an ArgumentNullException if the provided argument is null.
            </summary>
            <param name="argument">The argument to validate.</param>
            <param name="argumentName">The name of the argument, used in the exception message.</param>
        </member>
        <member name="T:RGN.Utility.ThrowIf.String">
            <summary>
            Nested class containing methods for string validation.
            </summary>
        </member>
        <member name="M:RGN.Utility.ThrowIf.String.IsNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if the provided string is null or empty.
            </summary>
            <param name="str">The string to validate.</param>
            <param name="strName">The name of the string, used in the exception message.</param>
        </member>
        <member name="T:RGN.Utility.ThrowIf.Collection">
            <summary>
            Nested class containing methods for collection validation.
            </summary>
        </member>
        <member name="M:RGN.Utility.ThrowIf.Collection.IsNullOrEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Throws an exception if the provided collection is null or empty.
            </summary>
            <param name="collection">The collection to validate.</param>
            <param name="collectionName">The name of the collection, used in the exception message.</param>
        </member>
        <member name="T:RGN.Utility.ThrowIf.Field">
            <summary>
            Nested class containing methods for field validation.
            </summary>
        </member>
        <member name="M:RGN.Utility.ThrowIf.Field.IsNull(System.Object,System.String)">
            <summary>
            Throws an InvalidOperationException if the provided field is null.
            </summary>
            <param name="argument">The field to validate.</param>
            <param name="argumentName">The name of the field, used in the exception message.</param>
        </member>
        <member name="M:RGN.Utility.ThrowIf.Field.IsNotNull(System.Object,System.String)">
            <summary>
            Throws an InvalidOperationException if the provided field is not null.
            </summary>
            <param name="argument">The field to validate.</param>
            <param name="argumentName">The name of the field, used in the exception message.</param>
        </member>
        <member name="T:RGN.Utility.ThrowIf.Value">
            <summary>
            Nested class containing methods for value validation.
            </summary>
        </member>
        <member name="M:RGN.Utility.ThrowIf.Value.IsZero(System.Int32,System.String)">
            <summary>
            Throws an ArgumentException if the provided value is zero.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="valueName">The name of the value, used in the exception message.</param>
        </member>
        <member name="M:RGN.Utility.ThrowIf.Value.IsZeroOrNegative(System.Int32,System.String)">
            <summary>
            Throws an ArgumentException if the provided value is zero or negative.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="valueName">The name of the value, used in the exception message.</param>
        </member>
        <member name="T:RGN.Utility.ThrowIf.Index">
            <summary>
            Nested class containing methods for index validation within a collection.
            </summary>
        </member>
        <member name="M:RGN.Utility.ThrowIf.Index.IsOutOfBounds(System.Int32,System.String,System.Collections.ICollection)">
            <summary>
            Throws an ArgumentOutOfRangeException if the provided index is out of bounds of the collection.
            </summary>
            <param name="index">The index to validate.</param>
            <param name="collectionName">The name of the collection, used in the exception message.</param>
            <param name="collection">The collection to validate against.</param>
        </member>
    </members>
</doc>
